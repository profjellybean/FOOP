var g=Object.defineProperty;var v=(s,e,t)=>e in s?g(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var o=(s,e,t)=>(v(s,typeof e!="symbol"?e+"":e,t),t);import{x as w,j as k,y as P,z as C}from"./index-7370479e.js";function u(s){if(typeof s!="object")return s;var e,t,i=Object.prototype.toString.call(s);if(i==="[object Object]"){if(s.constructor!==Object&&typeof s.constructor=="function"){t=new s.constructor;for(e in s)s.hasOwnProperty(e)&&t[e]!==s[e]&&(t[e]=u(s[e]))}else{t={};for(e in s)e==="__proto__"?Object.defineProperty(t,e,{value:u(s[e]),configurable:!0,enumerable:!0,writable:!0}):t[e]=u(s[e])}return t}if(i==="[object Array]"){for(e=s.length,t=Array(e);e--;)t[e]=u(s[e]);return t}return i==="[object Set]"?(t=new Set,s.forEach(function(n){t.add(u(n))}),t):i==="[object Map]"?(t=new Map,s.forEach(function(n,r){t.set(u(r),u(n))}),t):i==="[object Date]"?new Date(+s):i==="[object RegExp]"?(t=new RegExp(s.source,s.flags),t.lastIndex=s.lastIndex,t):i==="[object DataView]"?new s.constructor(u(s.buffer)):i==="[object ArrayBuffer]"?s.slice(0):i.slice(-6)==="Array]"?new s.constructor(s):s}class M{constructor(){o(this,"numberOfMice",25);o(this,"mouseWinCounter",0);o(this,"mousePos");o(this,"mouseTargetList");o(this,"goalPos")}async updateMousePosition(e,t){return new Promise((i,n)=>{var l,c,p,m,f,d;this.mousePos=new a(e.getComponent("pos").x,e.getComponent("pos").y),this.mouseTargetList=e.getComponent("targetList").positions,this.goalPos=this.getCurrentGoalPosition();const r=this.calcStep();t.map[this.mousePos.x][this.mousePos.y].occupied=null,t.map[r.x][r.y].occupied=e,(r.x===((l=this.goalPos)==null?void 0:l.x)&&r.y===((c=this.goalPos)==null?void 0:c.y)||((p=this.mousePos)==null?void 0:p.x)===((m=this.goalPos)==null?void 0:m.x)&&((f=this.mousePos)==null?void 0:f.y)===((d=this.goalPos)==null?void 0:d.y))&&(this.mouseTargetList.length===0&&(e.getComponent("isAlive").isAlive=!1,this.mouseWinCounter++,i()),this.mouseTargetList.pop()),e.getComponent("pos").x=r.x,e.getComponent("pos").y=r.y,i()})}getInitialMouseX(){return Math.floor(Math.random()*100)}getInitialMouseY(){return Math.floor(Math.random()*100)}calcStep(){if(this.mousePos!==void 0&&this.mousePos.x!==void 0&&this.mousePos.y!==void 0&&this.goalPos!==void 0&&this.goalPos.x!==void 0&&this.goalPos.y!==void 0){const e=this.mousePos.x-this.goalPos.x,t=this.mousePos.y-this.goalPos.y;return e>0&&t!=0?t>0?new a(this.mousePos.x-1,this.mousePos.y-1):new a(this.mousePos.x-1,this.mousePos.y+1):e<0&&t!=0?t>0?new a(this.mousePos.x+1,this.mousePos.y-1):new a(this.mousePos.x+1,this.mousePos.y+1):t>0?new a(this.mousePos.x,this.mousePos.y-1):new a(this.mousePos.x,this.mousePos.y+1)}return this.goalPos}getCurrentGoalPosition(){return this.mouseTargetList!==void 0&&this.mouseTargetList.length!==void 0&&this.mouseTargetList.length>0?this.mouseTargetList[this.mouseTargetList.length-1]:this.goalPos}getNumberOfMice(){return this.numberOfMice}getMouseWinCounter(){return this.mouseWinCounter}killMouse(e){return this.numberOfMice>0&&e.components.isAlive!==!1?(this.numberOfMice--,e.components.isAlive=!1,console.log(e),console.log(this.numberOfMice),1):0}}class a{constructor(e,t){o(this,"x");o(this,"y");this.x=e,this.y=t}}class b{constructor(e){o(this,"_entityCount",0);o(this,"_entities",{});o(this,"numberOfMice");this.numberOfMice=e}getMouse(e){return this._entities[`${e}`]}isAlive(e){return this._entities[`${e}`].getComponent("isAlive").isAlive}createEntity(e){if(e||(e=this._entityCount.toString()),this._entities[e])throw new Error(`Entity with ID ${e} already exists`);const t=new S(e);return this._entities[t.id]=t,this._entityCount++,t}importEntities(e){this._entities={...this._entities,...e}}update(e){this.importEntities(e)}}class S{constructor(e){o(this,"id");o(this,"components",{});this.id=e}addComponent(e,t){this.components[e.compName]=e.init(t)}getComponent(e){return this.components[e]}}class y{constructor(){o(this,"compName","ap");o(this,"shape")}init(e){return{shape:e.shape??"mouse"}}}class h{constructor(e){o(this,"compName");o(this,"x");o(this,"y");this.compName=e}init(e){return{x:e.x??0,y:e.y??0}}}class _{constructor(e){o(this,"compName");o(this,"positions");this.compName=e,this.positions=[]}init(e){return this.positions=e,{positions:this.positions}}}class O{constructor(){o(this,"compName","isAlive");o(this,"isAlive")}init(e){return{isAlive:e??!1}}}class A{constructor(){o(this,"compName","map");o(this,"map")}init(e){this.map=Array(100);for(let t=0;t<100;t++){this.map[t]=new Array(100);for(let i=0;i<100;i++)t%20===0&&t!==0?this.map[t][i]={occupied:null,type:"underground"}:this.map[t][i]={occupied:null,type:"surface"}}return this.map[85][10]={occupied:null,type:"meeting"},this.map[20][10]={occupied:null,type:"entry"},this.map[20][80]={occupied:null,type:"entry"},this.map[40][90]={occupied:null,type:"entry"},this.map[40][20]={occupied:null,type:"entry"},this.map[60][10]={occupied:null,type:"entry"},this.map[60][30]={occupied:null,type:"entry"},this.map[80][90]={occupied:null,type:"entry"},this.map}}class B{constructor(e,t,i,n){o(this,"logTag","[GameService]");o(this,"_settings");o(this,"gameFinished",!1);o(this,"peerService");o(this,"entitySystem");o(this,"map",w(new A));o(this,"numberOfMice");o(this,"currentState",k({}));o(this,"stateBuffer",{});o(this,"mouseHelper");o(this,"counter",0);o(this,"killCount",P({kills:0}));this._settings=i??{gameId:"game1",multiplayer:!1,networked:!1},this.mouseHelper=new M,this.numberOfMice=this.mouseHelper.getNumberOfMice(),this.peerService=e,this.entitySystem=t??new b(this.numberOfMice),this.map.value.init()}async updateOpponentPosition(){for(let e=1;e<=this.numberOfMice;e++){const t=this.entitySystem.getMouse(e.toString());this.entitySystem.isAlive(t.id)&&await this.mouseHelper.updateMousePosition(t,this.map.value)}}startGame(e){this.currentState.value={players:{...this.generatePlayers(e)},opponents:{...this.generateOpponents()}},this.stateBuffer={...this.currentState.value},this._settings.multiplayer&&this._settings.networked&&this.peerService.send({type:"start_game",value:{state:this.currentState.value}}),window.requestAnimationFrame(this._gameLoop.bind(this))}generatePlayers(e=[]){const t={};for(const i of e){const n=this.entitySystem.createEntity(i);n.addComponent(new y,{shape:"cat"}),n.addComponent(new h("pos"),{x:50,y:50}),t[n.id]=n}return t}generateOpponents(){const e={};for(let t=0;t<this.numberOfMice;++t){const i=this.entitySystem.createEntity();i.addComponent(new y,{shape:"mouse"}),i.addComponent(new h("pos"),{x:this.mouseHelper.getInitialMouseX(),y:this.mouseHelper.getInitialMouseY()}),i.addComponent(new h("goal"),{x:85,y:10}),i.addComponent(new _("targetList"),this.generateMouseGoalList()),i.addComponent(new O,{isAlive:!0}),e[i.id]=i}return e}randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}generateMouseGoalList(){const e=[];e.push(new a(this.randomIntFromInterval(0,99),this.randomIntFromInterval(0,99)));const t=this.randomIntFromInterval(1,3);if(t!=1){if(t==2)e.push(new a(85,10));else if(t==3)for(let i=0;i<Math.floor(Math.random()*10);i++)e.push(new a(Math.floor(Math.random()*100),Math.floor(Math.random()*100)))}return e}emit(e,t,i){const n=u(this.stateBuffer.players[e]);if(!n){console.warn(`${this.logTag} Entity with ID ${e} not found`);return}switch(t){case"move":this._handleMove(n,i);break}this.stateBuffer.players[e]=n}checkBorder(e,t){return!(this.map.value.map[e]==null||this.map.value.map[e][t]==null)}_handleMove(e,t){const i=e.getComponent("pos");switch(t){case"up":if(!this.checkBorder(i.x-1,i.y))break;this.map.value.map[i.x][i.y].occupied=null,i.x=i.x-1,this.checkCollision(i.x,i.y),this.map.value.map[i.x][i.y].occupied=e;break;case"right":if(!this.checkBorder(i.x,i.y+1))break;this.map.value.map[i.x][i.y].occupied=null,i.y=i.y+1,this.checkCollision(i.x,i.y),this.map.value.map[i.x][i.y].occupied=e;break;case"left":if(!this.checkBorder(i.x-1,i.y-1))break;this.map.value.map[i.x][i.y].occupied=null,i.y=i.y-1,this.checkCollision(i.x,i.y),this.map.value.map[i.x][i.y].occupied=e;break;case"down":if(!this.checkBorder(i.x+1,i.y))break;this.map.value.map[i.x][i.y].occupied=null,i.x=i.x+1,this.checkCollision(i.x,i.y),this.map.value.map[i.x][i.y].occupied=e;break;default:console.warn(`${this.logTag} Unknown direction ${t}`)}}checkCollision(e,t){this.killChecker(e,t),e=e-1,this.killChecker(e,t),e=e+2,this.killChecker(e,t),e=e-1,t=t-1,this.killChecker(e,t),t=t+2,this.killChecker(e,t),e=e+1,this.killChecker(e,t),t=t-2,this.killChecker(e,t),e=e-2,this.killChecker(e,t),t=t+2,this.killChecker(e,t)}killChecker(e,t){var i;if(t>=0&&t<100&&e>=0&&e<100&&this.map.value.map[e][t].occupied!=null&&this.map.value.map[e][t].type!="underground"){const n=(i=this.map.value.map[e][t].occupied)==null?void 0:i.id,r=this.entitySystem.getMouse(n.toString());this.killCount.kills+=this.mouseHelper.killMouse(r)}}async _gameLoop(){this.counter++,this.counter%7===0&&(this.counter=0,await this.updateOpponentPosition()),C(this.map),this._settings.multiplayer&&this._settings.networked&&this.peerService.send({type:"update",value:this.stateBuffer}),this.entitySystem.update(this.stateBuffer.players),this.entitySystem.update(this.stateBuffer.opponents),this.stateBuffer={...this.currentState.value},this.gameFinished!==!0&&window.requestAnimationFrame(this._gameLoop.bind(this))}}export{B as G};
